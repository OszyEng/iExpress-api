openapi: 3.0.3
info:
  title: iExpress API
  description: A microblog API for user management, sessions, follows, and posts
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local development server
components:
  securitySchemes:
    SessionAuth:
      type: apiKey
      in: header
      name: X-Session-ID
  schemas:
    User:
      type: object
      properties:
        handle:
          type: string
        email:
          type: string
        created_time:
          type: string
          format: date-time
    Session:
      type: object
      properties:
        session_id:
          type: string
        handle:
          type: string
    Follow:
      type: object
      properties:
        handle:
          type: string
        followed_handle:
          type: string
        followed_time:
          type: string
          format: date-time
    Post:
      type: object
      properties:
        post_id:
          type: integer
        content:
          type: string
        created_date:
          type: string
          format: date-time
        session_id:
          type: string
        replied_message:
          type: integer
          nullable: true
        user_handle:
          type: string
    Error:
      type: object
      properties:
        error:
          type: string
paths:
  /users:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                handle:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required: [handle, email, password]
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{handle}:
    get:
      summary: Get user information
      security:
        - SessionAuth: []
      parameters:
        - name: handle
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a user
      security:
        - SessionAuth: []
      parameters:
        - name: handle
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /session/login:
    post:
      summary: Login to create a session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required: [email, password]
      responses:
        '200':
          description: Session created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /session:
    delete:
      summary: Logout (end session)
      security:
        - SessionAuth: []
      responses:
        '200':
          description: Session ended
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /follow:
    post:
      summary: Follow a user
      security:
        - SessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                followed_handle:
                  type: string
              required: [followed_handle]
      responses:
        '201':
          description: Follow created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /follow/{followed_handle}:
    delete:
      summary: Unfollow a user
      security:
        - SessionAuth: []
      parameters:
        - name: followed_handle
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Unfollowed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Not following user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts:
    post:
      summary: Create a post
      security:
        - SessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                replied_message:
                  type: integer
                  nullable: true
              required: [content]
      responses:
        '201':
          description: Post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get latest posts
      responses:
        '200':
          description: List of latest posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts/user/{handle}:
    get:
      summary: Get posts by user
      parameters:
        - name: handle
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of user posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts/following:
    get:
      summary: Get posts from followed users
      security:
        - SessionAuth: []
      responses:
        '200':
          description: List of posts from followed users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts/search:
    get:
      summary: Search posts by content
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of matching posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '400':
          description: Missing query parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'